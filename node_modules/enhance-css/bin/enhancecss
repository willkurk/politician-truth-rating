#!/usr/bin/env node

/* jshint latedef: false */

var commands = require('commander');
var EnhanceCSS = require('../index');
var fs = require('fs');
var path = require('path');

var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
var buildVersion = JSON.parse(packageConfig).version;

// Specify commander options to parse command line params correctly
commands
  .version(buildVersion, '-v, --version')
  .usage('[options] [source-file]')
  .option('-r, --root [root-path]', 'Set a root path to which resolve absolute @import rules')
  .option('-o, --output [output-file]', 'Use [output-file] as output instead of STDOUT')
  .option('--crypted-stamp', 'Rename image files with MD5 hash attached (hard cache boosters)')
  .option('--no-stamp', 'Disable adding stamp to URLs')
  .option('--no-embed-version', 'Output both embedded and non embedded version')
  .option('--force-embed', 'Forces embed on all supported assets')
  .option('--asset-hosts [host-pattern]', 'Use one or more asset hosts, e.g assets[0,1,2].example.com')
  .option('--pregzip', 'Automatically gzip the enhanced files (not available when no output file given)')
  .parse(process.argv);

var fromStdin = !process.env.__DIRECT__ && !process.stdin.isTTY;

// If no sensible data passed in just print help and exit
if (!fromStdin && commands.args.length === 0) {
  commands.outputHelp();
  return 0;
}

var options = {
  source: commands.args[0],
  target: commands.output,
  rootPath: commands.root || process.cwd(),
  assetHosts: !!commands.assetHosts,
  pregzip: !!commands.pregzip,
  noEmbedVersion: !commands.embedVersion,
  cryptedStamp: !!commands.cryptedStamp,
  stamp: !!commands.stamp,
  forceEmbed: !!commands.forceEmbed
};

if (options.source) {
  fs.readFile(options.source, 'utf8', function(error, text) {
    if (error)
      throw error;
    enhance(text, output);
  });
} else {
  var stdin = process.openStdin();
  stdin.setEncoding('utf-8');
  var text = '';
  stdin.on('data', function(chunk) { text += chunk; });
  stdin.on('end', function() { enhance(text, output); });
}

function enhance(source, callback) {
  return new EnhanceCSS(options).process(source, function(error, data) {
    if (error)
      throw error;

    callback(data);
  });
}

function write(target, content) {
  if (typeof target == 'string') {
    fs.writeFileSync(target, content.plain);

    if (options.pregzip)
      fs.writeFileSync(target + '.gz', content.compressed);
  } else {
    target.write(content);
  }
}

function reportWarnings(list) {
  list.forEach(function(warning) {
    console.warn('WARNING: ' + warning);
  });
}

function output(enhanced) {
  if (options.target) {
    write(options.target, enhanced.embedded);
    if (options.noEmbedVersion)
      write(options.target.replace(/\.(\w+)$/, '-noembed.$1'), enhanced.notEmbedded);
  } else {
    write(process.stdout, enhanced.embedded);
  }

  reportWarnings(enhanced.warnings);
}
